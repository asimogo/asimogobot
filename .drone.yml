kind: pipeline
type: docker
name: deploy-bot

steps:
  - name: build-and-deploy
    image: docker/compose:1.29.2
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock
    environment:
      COMPOSE_PROJECT_NAME: asimogoBot
      TZ: Asia/Phnom_Penh
      # ↓ 从 Drone secrets 注入 ↓
      BOT_TOKEN:
        from_secret: BOT_TOKEN
      BAIDU_APPID:
        from_secret: BAIDU_APPID
      BAIDU_SECRET:
        from_secret: BAIDU_SECRET
      BAIDU_OCR_TOKEN:
        from_secret: BAIDU_OCR_TOKEN
      DEEPSEEK_API_KEY:
        from_secret: DEEPSEEK_API_KEY
      FLOMO_WEBHOOK:
        from_secret: FLOMO_WEBHOOK
      NOTION_API_KEY:
        from_secret: NOTION_API_KEY
      NOTION_PAGE_ID:
        from_secret: NOTION_PAGE_ID
      REDIS_URL: redis://192.168.0.105:6379
      NODE_ENV: production
    commands:
      - docker-compose version

      # 1) 必填项校验（防止空值写入 .env）
      - |
        required_vars="BOT_TOKEN DEEPSEEK_API_KEY REDIS_URL NODE_ENV TZ \
                       BAIDU_APPID BAIDU_SECRET BAIDU_OCR_TOKEN \
                       FLOMO_WEBHOOK NOTION_API_KEY NOTION_PAGE_ID"
        for k in $required_vars; do
          v=$(eval echo "\$$k")
          if [ -z "$v" ]; then
            echo "❌ Missing required env: $k"
            exit 1
          fi
        done
        echo "✅ All required envs are present."

      # 2) 写入 .env（注意：不要给 EOF 加引号，允许变量展开）
      - |
        cat > .env <<EOF
        BOT_TOKEN=${BOT_TOKEN}
        BAIDU_APPID=${BAIDU_APPID}
        BAIDU_SECRET=${BAIDU_SECRET}
        BAIDU_OCR_TOKEN=${BAIDU_OCR_TOKEN}
        DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
        FLOMO_WEBHOOK=${FLOMO_WEBHOOK}
        NOTION_API_KEY=${NOTION_API_KEY}
        NOTION_PAGE_ID=${NOTION_PAGE_ID}
        REDIS_URL=${REDIS_URL}
        NODE_ENV=${NODE_ENV}
        TZ=${TZ}
        EOF
        echo "✅ .env file generated."

      # 3) 构建 + 启动（如有变化会重建），并清理孤儿容器
      - docker-compose -f docker-compose.prod.yml up -d --build --remove-orphans

      # 4) 基本状态与关键信息
      - docker-compose -f docker-compose.prod.yml ps
      - docker-compose -f docker-compose.prod.yml logs --tail=200 --no-color bot || true

      # 5) 容器内二次校验（确认变量已注入）
      - |
        inside=$(docker-compose -f docker-compose.prod.yml exec -T bot /bin/sh -lc 'printenv BOT_TOKEN || true')
        if [ -z "$inside" ]; then
          echo "❌ BOT_TOKEN is missing inside container."
          exit 1
        fi
        echo "✅ BOT_TOKEN is present inside container (value hidden)."

      # 6) 清理工作目录中的 .env（容器已拿到环境变量）
      - rm -f .env

volumes:
  - name: docker-sock
    host:
      path: /var/run/docker.sock

trigger:
  branch:
    - main
  event:
    - push
