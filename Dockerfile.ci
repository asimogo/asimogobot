# CI/CD 专用 Dockerfile
FROM node:20-alpine3.19 AS builder

# 添加必要的系统包
RUN apk update && apk upgrade && \
    apk add --no-cache git curl && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# 复制依赖文件
COPY package*.json ./

# 安装所有依赖（包括开发依赖，用于构建）
RUN npm ci

# 复制源代码
COPY . .

# 构建应用
RUN npm run build

# 生产阶段
FROM node:20-alpine3.19 AS production

# 添加必要的系统包和安全更新
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init curl && \
    rm -rf /var/cache/apk/*

# 创建非root用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# 从构建阶段复制构建产物
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./

# 只安装生产依赖
RUN npm ci --only=production && npm cache clean --force

# 切换到非root用户
USER nodejs

# 暴露端口
EXPOSE 3000

# 设置环境变量
ENV NODE_ENV=production
ENV PORT=3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# 启动应用
ENTRYPOINT ["dumb-init", "--"]
CMD ["npm", "start"]

# 添加标签
LABEL maintainer="your-email@example.com"
LABEL version="1.0.0"
LABEL description="Telegram Bot for OCR and Content Management"
